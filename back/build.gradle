buildscript { //dsl
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "org.sonarqube" version "3.0"
}

jar {
	enabled = false
}

group = 'com.roller'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" //dsl
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}" //dsl
}

tasks.named('test') {
	useJUnitPlatform()
}

//dsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl { //dsl
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets { //dsl
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

configurations { //dsl
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl { //dsl
	options.annotationProcessorPath = configurations.querydsl
}
// Default는 dev 로 지정
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

// 리소스 폴더 지정
sourceSets {
	main {
		resources {
			srcDirs "src/main/resources", "src/main/resources-${profile}"
		}
	}
}
